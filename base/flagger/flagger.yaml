---
# Source: flagger/templates/account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flagger
  annotations:
  labels:
    helm.sh/chart: flagger-1.0.1
    app.kubernetes.io/name: flagger
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: flagger
---
# Source: flagger/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: flagger
  labels:
    helm.sh/chart: flagger-1.0.1
    app.kubernetes.io/name: flagger
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: flagger
rules:
  - apiGroups:
      - ""
    resources:
      - events
      - configmaps
      - configmaps/finalizers
      - secrets
      - secrets/finalizers
      - services
      - services/finalizers
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - apps
    resources:
      - daemonsets
      - daemonsets/finalizers
      - deployments
      - deployments/finalizers
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - autoscaling
    resources:
      - horizontalpodautoscalers
      - horizontalpodautoscalers/finalizers
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses
      - ingresses/finalizers
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - flagger.app
    resources:
      - canaries
      - canaries/status
      - metrictemplates
      - metrictemplates/status
      - alertproviders
      - alertproviders/status
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - networking.istio.io
    resources:
      - virtualservices
      - virtualservices/finalizers
      - destinationrules
      - destinationrules/finalizers
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - appmesh.k8s.aws
    resources:
      - virtualnodes
      - virtualnodes/finalizers
      - virtualrouters
      - virtualrouters/finalizers
      - virtualservices
      - virtualservices/finalizers
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - split.smi-spec.io
    resources:
      - trafficsplits
      - trafficsplits/finalizers
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - specs.smi-spec.io
    resources:
      - httproutegroups
      - httproutegroups/finalizers
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - gloo.solo.io
    resources:
      - upstreams
      - upstreams/finalizers
      - upstreamgroups
      - upstreamgroups/finalizers
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - projectcontour.io
    resources:
      - httpproxies
      - httpproxies/finalizers
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - nonResourceURLs:
      - /version
    verbs:
      - get
---
# Source: flagger/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: flagger
  labels:
    helm.sh/chart: flagger-1.0.1
    app.kubernetes.io/name: flagger
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: flagger
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flagger
subjects:
- name: flagger
  namespace: linkerd
  kind: ServiceAccount
---
# Source: flagger/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flagger
  labels:
    helm.sh/chart: flagger-1.0.1
    app.kubernetes.io/name: flagger
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: flagger
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: flagger
      app.kubernetes.io/instance: flagger
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flagger
        app.kubernetes.io/instance: flagger
      annotations:
        appmesh.k8s.aws/sidecarInjectorWebhook: disabled
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: flagger
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: flagger
                    app.kubernetes.io/instance: flagger
                topologyKey: kubernetes.io/hostname
      volumes:
      containers:
        - name: flagger
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 10001
          volumeMounts:
          image: "weaveworks/flagger:1.0.1"
          imagePullPolicy: IfNotPresent
          ports:
          - name: http
            containerPort: 8080
          command:
          - ./flagger
          - -log-level=info
          - -mesh-provider=linkerd
          - -metrics-server=http://linkerd-prometheus:9090
          - -enable-config-tracking=true
          - -slack-user=flagger
          livenessProbe:
            exec:
              command:
              - wget
              - --quiet
              - --tries=1
              - --timeout=4
              - --spider
              - http://localhost:8080/healthz
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
              - wget
              - --quiet
              - --tries=1
              - --timeout=4
              - --spider
              - http://localhost:8080/healthz
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 1000m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 32Mi
